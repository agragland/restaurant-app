{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\NightKing\\\\Documents\\\\00SCHOOL\\\\Spring 2021\\\\CSCE 3444\\\\Large Group Project\\\\react-practice\\\\flappyBird\\\\flappy-bird\\\\App.js\";\nimport React, { useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Taco from \"./components/Taco\";\nimport Obstacles from \"./components/obstacles\";\nexport default function App() {\n  var screenWidth = window.innerWidth;\n  var screenHeight = window.innerHeight;\n  var tacoLeft = screenWidth / 2;\n\n  var _useState = useState(screenHeight / 2),\n      _useState2 = _slicedToArray(_useState, 2),\n      tacoBottom = _useState2[0],\n      setTacoBottom = _useState2[1];\n\n  var _useState3 = useState(screenWidth + 30),\n      _useState4 = _slicedToArray(_useState3, 2),\n      obstaclesLeft = _useState4[0],\n      setObstaclesLeft = _useState4[1];\n\n  var _useState5 = useState(screenWidth + screenWidth / 3 + 30),\n      _useState6 = _slicedToArray(_useState5, 2),\n      obstaclesLeftTwo = _useState6[0],\n      setObstaclesLeftTwo = _useState6[1];\n\n  var _useState7 = useState(screenWidth + 2 * (screenWidth / 3) + 30),\n      _useState8 = _slicedToArray(_useState7, 2),\n      obstaclesLeftThree = _useState8[0],\n      setObstaclesLeftThree = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      obstaclesNegHeight = _useState10[0],\n      setObstaclesNegHeight = _useState10[1];\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      obstaclesNegHeightTwo = _useState12[0],\n      setObstaclesNegHeightTwo = _useState12[1];\n\n  var _useState13 = useState(0),\n      _useState14 = _slicedToArray(_useState13, 2),\n      obstaclesNegHeightThree = _useState14[0],\n      setObstaclesNegHeightThree = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      isGameOver = _useState16[0],\n      setIsGameOver = _useState16[1];\n\n  var _useState17 = useState(0),\n      _useState18 = _slicedToArray(_useState17, 2),\n      score = _useState18[0],\n      setScore = _useState18[1];\n\n  var obstacleWidth = 60;\n  var obstacleHeight = 300;\n  var gap = 160;\n  var obstacleWidthTwo = 60;\n  var obstacleHeightTwo = 300;\n  var gapTwo = 160;\n  var obstacleWidthThree = 60;\n  var obstacleHeightThree = 300;\n  var gapThree = 160;\n  var gameTimerId;\n  var obstaclesLeftTimerId;\n  var obstaclesLeftTimerIdTwo;\n  var obstaclesLeftTimerIdThree;\n  var newScreenSet = screenWidth + screenWidth + 30;\n  useEffect(function () {\n    if (tacoBottom > 0) {\n      gameTimerId = setInterval(function () {\n        setTacoBottom(function (tacoBottom) {\n          return tacoBottom - 3;\n        });\n      }, 30);\n      return function () {\n        clearInterval(gameTimerId);\n      };\n    }\n  }, [tacoBottom]);\n  console.log(tacoBottom);\n\n  var jump = function jump() {\n    if (!isGameOver && tacoBottom < screenHeight) {\n      setTacoBottom(function (tacoBottom) {\n        return tacoBottom + 50;\n      });\n    }\n  };\n\n  useEffect(function () {\n    if (obstaclesLeft > -obstacleWidth) {\n      obstaclesLeftTimerId = setInterval(function () {\n        setObstaclesLeft(function (obstaclesLeft) {\n          return obstaclesLeft - 5;\n        });\n      }, 30);\n      return function () {\n        clearInterval(obstaclesLeftTimerId);\n      };\n    } else {\n      setObstaclesLeft(newScreenSet);\n      setObstaclesNegHeight(-Math.random() * 120);\n      setScore(function (score) {\n        return score + 1;\n      });\n    }\n  }, [obstaclesLeft]);\n  useEffect(function () {\n    if (obstaclesLeftTwo > -obstacleWidth) {\n      obstaclesLeftTimerIdTwo = setInterval(function () {\n        setObstaclesLeftTwo(function (obstaclesLeftTwo) {\n          return obstaclesLeftTwo - 5;\n        });\n      }, 35);\n      return function () {\n        clearInterval(obstaclesLeftTimerIdTwo);\n      };\n    } else {\n      setObstaclesLeftTwo(newScreenSet);\n      setObstaclesNegHeightTwo(-Math.random() * 120);\n      setScore(function (score) {\n        return score + 1;\n      });\n    }\n  }, [obstaclesLeftTwo]);\n  useEffect(function () {\n    if (obstaclesLeftThree > -obstacleWidth) {\n      obstaclesLeftTimerIdThree = setInterval(function () {\n        setObstaclesLeftThree(function (obstaclesLeftThree) {\n          return obstaclesLeftThree - 5;\n        });\n      }, 30);\n      return function () {\n        clearInterval(obstaclesLeftTimerIdThree);\n      };\n    } else {\n      setObstaclesLeftThree(newScreenSet);\n      setObstaclesNegHeightThree(-Math.random() * 100);\n      setScore(function (score) {\n        return score + 1;\n      });\n    }\n  }, [obstaclesLeftThree]);\n  useEffect(function () {\n    if ((tacoBottom < obstaclesNegHeight + obstacleHeight + 30 || tacoBottom > obstaclesNegHeight + obstacleHeight + gap - 30) && obstaclesLeft > screenWidth / 2 - 30 && obstaclesLeft < screenWidth / 2 + 30 || (tacoBottom < obstaclesNegHeightTwo + obstacleHeight + 30 || tacoBottom > obstaclesNegHeightTwo + obstacleHeight + gap - 30) && obstaclesLeftTwo > screenWidth / 2 - 30 && obstaclesLeftTwo < screenWidth / 2 + 30 || (tacoBottom < obstaclesNegHeightThree + obstacleHeight + 30 || tacoBottom > obstaclesNegHeightThree + obstacleHeight + gap - 30) && obstaclesLeftThree > screenWidth / 2 - 30 && obstaclesLeftThree < screenWidth / 2 + 30) {\n      console.log('game over');\n      gameOver();\n    }\n  });\n\n  var gameOver = function gameOver() {\n    clearInterval(gameTimerId);\n    clearInterval(obstaclesLeftTimerId);\n    clearInterval(obstaclesLeftTimerIdTwo);\n    clearInterval(obstaclesLeftTimerIdThree);\n    setIsGameOver(true);\n  };\n\n  return React.createElement(TouchableWithoutFeedback, {\n    onPress: jump,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, isGameOver && React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 24\n    }\n  }, \"Score:\", React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 36\n    }\n  }), score), React.createElement(Taco, {\n    tacoBottom: tacoBottom,\n    tacoLeft: tacoLeft,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }), React.createElement(Obstacles, {\n    color: '#F5853F',\n    obstaclesLeft: obstaclesLeft,\n    obstacleWidth: obstacleWidth,\n    obstacleHeight: obstacleHeight,\n    randomBottom: obstaclesNegHeight,\n    gap: gap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }), React.createElement(Obstacles, {\n    color: '#0091Ad',\n    obstaclesLeft: obstaclesLeftTwo,\n    obstacleWidth: obstacleWidthTwo,\n    obstacleHeight: obstacleHeightTwo,\n    randomBottom: obstaclesNegHeightTwo,\n    gap: gapTwo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }), React.createElement(Obstacles, {\n    color: '#440D0F',\n    obstaclesLeft: obstaclesLeftThree,\n    obstacleWidth: obstacleWidthThree,\n    obstacleHeight: obstacleHeightThree,\n    randomBottom: obstaclesNegHeightThree,\n    gap: gapThree,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  })));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/NightKing/Documents/00SCHOOL/Spring 2021/CSCE 3444/Large Group Project/react-practice/flappyBird/flappy-bird/App.js"],"names":["React","useEffect","useState","Taco","Obstacles","App","screenWidth","window","innerWidth","screenHeight","innerHeight","tacoLeft","tacoBottom","setTacoBottom","obstaclesLeft","setObstaclesLeft","obstaclesLeftTwo","setObstaclesLeftTwo","obstaclesLeftThree","setObstaclesLeftThree","obstaclesNegHeight","setObstaclesNegHeight","obstaclesNegHeightTwo","setObstaclesNegHeightTwo","obstaclesNegHeightThree","setObstaclesNegHeightThree","isGameOver","setIsGameOver","score","setScore","obstacleWidth","obstacleHeight","gap","obstacleWidthTwo","obstacleHeightTwo","gapTwo","obstacleWidthThree","obstacleHeightThree","gapThree","gameTimerId","obstaclesLeftTimerId","obstaclesLeftTimerIdTwo","obstaclesLeftTimerIdThree","newScreenSet","setInterval","clearInterval","console","log","jump","Math","random","gameOver","styles","container","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import React, { useEffect, useState} from 'react';\nimport { StyleSheet, Text, View, TouchableWithoutFeedback } from 'react-native';\n\nimport Taco from './components/Taco';\nimport Obstacles from './components/obstacles';\n\nexport default function App() {\n  //get screen width and height\n  const screenWidth = window.innerWidth\n  const screenHeight = window.innerHeight\n  const tacoLeft = screenWidth / 2\n  const [tacoBottom, setTacoBottom] = useState(screenHeight / 2)\n  const [obstaclesLeft, setObstaclesLeft] = useState(screenWidth + 30)\n  const [obstaclesLeftTwo, setObstaclesLeftTwo] = useState(screenWidth + screenWidth/3 + 30)\n  const [obstaclesLeftThree, setObstaclesLeftThree] = useState(screenWidth + 2*(screenWidth/3) + 30)\n  const [obstaclesNegHeight, setObstaclesNegHeight] = useState(0)\n  const [obstaclesNegHeightTwo, setObstaclesNegHeightTwo] = useState(0)  \n  const [obstaclesNegHeightThree, setObstaclesNegHeightThree] = useState(0)   \n  const [isGameOver, setIsGameOver] = useState(false)\n  const [score, setScore] = useState(0)\n\n  const obstacleWidth = 60\n  const obstacleHeight = 300\n  const gap = 160\n  const obstacleWidthTwo = 60\n  const obstacleHeightTwo = 300\n  const gapTwo = 160\n  const obstacleWidthThree = 60\n  const obstacleHeightThree = 300\n  const gapThree = 160\n\n  let gameTimerId \n  let obstaclesLeftTimerId\n  let obstaclesLeftTimerIdTwo\n  let obstaclesLeftTimerIdThree\n  let newScreenSet = screenWidth + screenWidth + 30\n\n\n  //start taco falling\n  useEffect(() => {\n    if(tacoBottom > 0){\n      gameTimerId = setInterval(() =>{\n        setTacoBottom(tacoBottom => tacoBottom - 3)\n      }, 30)\n\n      return()=>{\n        clearInterval(gameTimerId)\n      }\n    }\n  }, [tacoBottom])\n  console.log(tacoBottom)\n\n  //make taco jump \n  const jump = () => {\n    if(!isGameOver && tacoBottom < screenHeight){\n      setTacoBottom(tacoBottom => tacoBottom + 50)\n    }\n  }\n\n//start first obstacle\n  useEffect(() => {\n    if(obstaclesLeft > -obstacleWidth){\n      obstaclesLeftTimerId = setInterval(() => {\n        setObstaclesLeft(obstaclesLeft => obstaclesLeft - 5)\n      }, 30)\n      \n      return() => {\n        clearInterval(obstaclesLeftTimerId)\n      }\n    } else {\n      setObstaclesLeft(newScreenSet)\n      setObstaclesNegHeight(- Math.random() * 120)\n      setScore(score => score + 1)\n    }  \n  }, [obstaclesLeft])\n\n  //start second obstacle\n  useEffect(() => {\n    if(obstaclesLeftTwo > -obstacleWidth){\n      obstaclesLeftTimerIdTwo = setInterval(() => {\n        setObstaclesLeftTwo(obstaclesLeftTwo => obstaclesLeftTwo - 5)\n      }, 35)\n      \n      return() => {\n        clearInterval(obstaclesLeftTimerIdTwo)\n      }\n    } else {\n      setObstaclesLeftTwo(newScreenSet)\n      setObstaclesNegHeightTwo(-Math.random()*120)\n      setScore(score => score + 1)\n    }  \n  }, [obstaclesLeftTwo])\n\n  //start third obstacle\n  useEffect(() => {\n    if(obstaclesLeftThree > -obstacleWidth){\n      obstaclesLeftTimerIdThree = setInterval(() => {\n        setObstaclesLeftThree(obstaclesLeftThree => obstaclesLeftThree - 5)\n      }, 30)\n      \n      return() => {\n        clearInterval(obstaclesLeftTimerIdThree)\n      }\n    } else {\n      setObstaclesLeftThree(newScreenSet)\n      setObstaclesNegHeightThree(-Math.random()*100)\n      setScore(score => score + 1)\n    }  \n  }, [obstaclesLeftThree])\n\n  //check for collisions \n  useEffect(() => {\n    if(\n      ((tacoBottom < (obstaclesNegHeight + obstacleHeight + 30) ||\n      tacoBottom > (obstaclesNegHeight + obstacleHeight + gap - 30)) &&\n      (obstaclesLeft > screenWidth/2 -30 && obstaclesLeft < screenWidth/2 + 30)\n      )\n      ||\n      ((tacoBottom < (obstaclesNegHeightTwo + obstacleHeight + 30) ||\n      tacoBottom > (obstaclesNegHeightTwo + obstacleHeight + gap - 30)) &&\n      (obstaclesLeftTwo > screenWidth/2 -30 && obstaclesLeftTwo < screenWidth/2 + 30)\n      ||\n      ((tacoBottom < (obstaclesNegHeightThree + obstacleHeight + 30) ||\n      tacoBottom > (obstaclesNegHeightThree + obstacleHeight + gap - 30)) &&\n      (obstaclesLeftThree > screenWidth/2 -30 && obstaclesLeftThree < screenWidth/2 + 30)\n      ))){\n      console.log('game over')\n      gameOver()\n    }\n  })\n\n  const gameOver = () => {\n    clearInterval(gameTimerId)\n    clearInterval(obstaclesLeftTimerId)\n    clearInterval(obstaclesLeftTimerIdTwo)\n    clearInterval(obstaclesLeftTimerIdThree)\n    setIsGameOver(true)\n  }\n\n  return (\n    <TouchableWithoutFeedback onPress={jump}>\n      <View style={styles.container}>\n        {isGameOver && <Text>Score:<br/>{score}</Text>}\n        <Taco \n          tacoBottom={tacoBottom}\n          tacoLeft={tacoLeft}\n        />\n        \n        <Obstacles\n        color={'#F5853F'}\n        obstaclesLeft={obstaclesLeft}\n        obstacleWidth={obstacleWidth}\n        obstacleHeight={obstacleHeight}\n        randomBottom={obstaclesNegHeight}\n        gap={gap}\n        />\n        <Obstacles\n        color={'#0091Ad'}\n        obstaclesLeft={obstaclesLeftTwo}\n        obstacleWidth={obstacleWidthTwo}\n        obstacleHeight={obstacleHeightTwo}\n        randomBottom={obstaclesNegHeightTwo}\n        gap={gapTwo}\n        />\n        <Obstacles\n        color={'#440D0F'}\n        obstaclesLeft={obstaclesLeftThree}\n        obstacleWidth={obstacleWidthThree}\n        obstacleHeight={obstacleHeightThree}\n        randomBottom={obstaclesNegHeightThree}\n        gap={gapThree}\n        />\n      </View>\n    </TouchableWithoutFeedback>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}